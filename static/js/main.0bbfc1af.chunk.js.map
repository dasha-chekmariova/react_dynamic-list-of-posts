{"version":3,"sources":["api/api.ts","components/PostsList/PostsList.tsx","components/NewCommentForm/NewCommentForm.tsx","api/posts.ts","api/comments.ts","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["BASE_URL","getPosts","a","fetch","response","json","getUsers","PostsList","posts","setSeletedPostId","useState","postId","setPostId","className","map","post","userId","title","id","type","onClick","NewCommentForm","setComment","nameInput","setNameInput","emailInput","setEmailInput","commentInput","setCommentInput","required","value","name","placeholder","onChange","event","target","preventDefault","current","email","body","getUserPosts","getPostDetails","getPostComments","PostDetails","selectedPostId","setPost","comments","setComments","clickButton","setClickButton","useEffect","then","postFromServer","commentFormServer","comment","commentFilter","result","filter","commentF","filterComments","App","setPosts","users","setUsers","selectValue","setSelectValue","getPostsFromServer","getUsersFromServer","postUsersServer","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0bbfc1af.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate.academy/students-api';\n\nexport async function getPosts(): Promise<Posts[]> {\n  const response = await fetch(`${BASE_URL}/posts`);\n\n  return response.json();\n}\n\nexport async function getUsers(): Promise<User[]> {\n  const response = await fetch(`${BASE_URL}/users`);\n\n  return response.json();\n}\n","import React, { useState } from 'react';\nimport './PostsList.scss';\n\ntype Props = {\n  posts: Posts[],\n  setSeletedPostId: React.Dispatch<React.SetStateAction<number | undefined>>\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  setSeletedPostId,\n}) => {\n  const [postId, setPostId] = useState(0);\n\n  return (\n    <>\n      {posts\n        && (\n          <div className=\"PostsList\">\n            <h2>Posts:</h2>\n            <ul\n              data-cy=\"postDetails\"\n              className=\"PostsList__list\"\n            >\n              {posts.map(post => (\n                <li\n                  key={post.id}\n                  className=\"PostsList__item\"\n                >\n                  <div>\n                    <b>{`[User #${post.userId}]:`}</b>\n                    {post.title}\n                  </div>\n\n                  {postId === post.id\n                    ? (\n                      <button\n                        type=\"button\"\n                        className=\"PostsList__button button\"\n                        onClick={() => {\n                          setSeletedPostId(0);\n                          setPostId(0);\n                        }}\n                      >\n                        Close\n                      </button>\n                    )\n                    : (\n                      <button\n                        type=\"button\"\n                        className=\"PostsList__button button\"\n                        onClick={() => {\n                          setSeletedPostId(post.id);\n                          setPostId(post.id);\n                        }}\n                      >\n                        Open\n                      </button>\n                    )}\n\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  setComment: React.Dispatch<React.SetStateAction<Comments[] | undefined>>\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ setComment }) => {\n  const [nameInput, setNameInput] = useState('');\n  const [emailInput, setEmailInput] = useState('');\n  const [commentInput, setCommentInput] = useState('');\n\n  const addComment = (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n  ) => {\n    event.preventDefault();\n\n    if (nameInput && emailInput && commentInput) {\n      setComment((current) => current && [...current, {\n        name: nameInput, email: emailInput, body: commentInput,\n      }]);\n      setNameInput('');\n      setEmailInput('');\n      setCommentInput('');\n    }\n  };\n\n  return (\n    <form className=\"NewCommentForm\">\n      <div className=\"form-field\">\n        <input\n          required\n          value={nameInput}\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          onChange={(event) => (\n            setNameInput(event.target.value)\n          )}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          value={emailInput}\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          required\n          onChange={(event) => (\n            setEmailInput(event.target.value)\n          )}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          value={commentInput}\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          onChange={(event) => (\n            setCommentInput(event.target.value)\n          )}\n          required\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n        onClick={addComment}\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport const getUserPosts = async (userId: number) => {\n  const response = await fetch(`${BASE_URL}/posts?userId=${userId}`);\n\n  return response.json();\n};\n\nexport const getPostDetails = async (postId: number) => {\n  const response = await fetch(`${BASE_URL}/posts/${postId}`);\n\n  return response.json();\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport const getPostComments = async (postId: number) => {\n  const response = await fetch(`${BASE_URL}/comments?postId=${postId}`);\n\n  return response.json();\n};\n","import { useEffect, useState } from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { getPostDetails } from '../../api/posts';\nimport { getPostComments } from '../../api/comments';\n\ntype Props = {\n  selectedPostId: number,\n};\n\nexport const PostDetails: React.FC<Props> = ({ selectedPostId }) => {\n  const [post, setPost] = useState<Posts>();\n  const [comments, setComments] = useState<Comments[]>();\n  const [clickButton, setClickButton] = useState(false);\n\n  useEffect(() => {\n    getPostDetails(selectedPostId)\n      .then(postFromServer => setPost(postFromServer));\n\n    getPostComments(selectedPostId)\n      .then(commentFormServer => setComments(commentFormServer));\n  }, [selectedPostId]);\n\n  const filterComments = (commentFilter: Comments) => {\n    const result = comments?.filter(\n      commentF => commentF.name !== commentFilter.name,\n    );\n\n    setComments(result);\n  };\n\n  return (\n    <>\n      {post && comments\n        && (\n          <div\n            data-cy=\"postDetails\"\n            className=\"PostDetails\"\n          >\n            <h2>Post details:</h2>\n\n            <section className=\"PostDetails__post\">\n              <p>{post.title}</p>\n            </section>\n\n            <section className=\"PostDetails__comments\">\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={() => (\n                  setClickButton(!clickButton)\n                )}\n              >\n                {\n                  clickButton\n                    ? 'Show comments'\n                    : 'Hide comments'\n                }\n              </button>\n\n              {!clickButton\n                && (\n                  <ul className=\"PostDetails__list\">\n                    {comments.map(comment => (\n                      <li\n                        key={comment.id}\n                        className=\"PostDetails__list-item\"\n                      >\n                        <button\n                          type=\"button\"\n                          className=\"PostDetails__remove-button button\"\n                          onClick={() => filterComments(comment)}\n                        >\n                          X\n                        </button>\n                        <p>{comment.body}</p>\n                      </li>\n                    ))}\n                  </ul>\n                )}\n\n            </section>\n\n            <section>\n              <div className=\"PostDetails__form-wrapper\">\n                <NewCommentForm setComment={setComments} />\n              </div>\n            </section>\n          </div>\n        )}\n    </>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport { getPosts, getUsers } from './api/api';\n\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUserPosts } from './api/posts';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState<Posts[]>();\n  const [users, setUsers] = useState<User[]>();\n\n  const [selectValue, setSelectValue] = useState('');\n  const [selectedPostId, setSeletedPostId] = useState<number>();\n\n  const getPostsFromServer = async () => {\n    const postFromServer = await getPosts();\n\n    setPosts(postFromServer);\n  };\n\n  const getUsersFromServer = async () => {\n    const postUsersServer = await getUsers();\n\n    setUsers(postUsersServer);\n  };\n\n  useEffect(() => {\n    getPostsFromServer();\n    getUsersFromServer();\n  }, []);\n\n  useEffect(() => {\n    if (selectValue !== 'all' && selectValue) {\n      getUserPosts(+selectValue).then(post => setPosts(post));\n    }\n\n    if (selectValue === 'all') {\n      getPostsFromServer();\n    }\n  }, [selectValue]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            value={selectValue}\n            onChange={(event) => {\n              setSelectValue(event.target.value);\n            }}\n            className=\"App__user-selector\"\n          >\n\n            <option value=\"all\">All users</option>\n\n            {users?.map(user => (\n              <option key={user.id} value={`${user.id}`}>\n                {user.name}\n              </option>\n            ))}\n\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          {posts\n            ? (\n              <PostsList\n                posts={posts}\n                setSeletedPostId={setSeletedPostId}\n              />\n            )\n            : 'loading...'}\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId\n            ? (\n              <PostDetails\n                selectedPostId={selectedPostId}\n              />\n            )\n            : 'No details'}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}