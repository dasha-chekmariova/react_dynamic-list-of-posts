{"version":3,"sources":["api/api.ts","components/PostsList/PostsList.tsx","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","api/posts.ts","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["BASE_URL","getPosts","a","fetch","response","json","getUsers","PostsList","posts","setSeletedPostId","useState","postId","setPostId","className","map","post","userId","title","id","type","onClick","getPostComments","addPostComments","name","email","body","method","JSON","stringify","headers","deleteComments","index","NewCommentForm","selectedPostId","requestForComments","nameInput","setNameInput","emailInput","setEmailInput","commentInput","setCommentInput","addComment","event","preventDefault","required","value","placeholder","onChange","target","getUserPosts","getPostDetails","PostDetails","setPost","comments","setComments","clickButton","setClickButton","then","commentFormServer","useEffect","postFromServer","deleteCom","i","comment","App","setPosts","users","setUsers","selectValue","setSelectValue","getPostsFromServer","getUsersFromServer","postUsersServer","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8bf40376.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate.academy/students-api';\n\nexport async function getPosts(): Promise<Posts[]> {\n  const response = await fetch(`${BASE_URL}/posts`);\n\n  return response.json();\n}\n\nexport async function getUsers(): Promise<User[]> {\n  const response = await fetch(`${BASE_URL}/users`);\n\n  return response.json();\n}\n","import React, { useState } from 'react';\nimport './PostsList.scss';\n\ntype Props = {\n  posts: Posts[],\n  setSeletedPostId: React.Dispatch<React.SetStateAction<number | undefined>>\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  setSeletedPostId,\n}) => {\n  const [postId, setPostId] = useState(0);\n\n  return (\n    <>\n      {posts\n        && (\n          <div className=\"PostsList\">\n            <h2>Posts:</h2>\n            <ul\n              data-cy=\"postDetails\"\n              className=\"PostsList__list\"\n            >\n              {posts.map(post => (\n                <li\n                  key={post.id}\n                  className=\"PostsList__item\"\n                >\n                  <div>\n                    <b>{`[User #${post.userId}]:`}</b>\n                    {post.title}\n                  </div>\n\n                  {postId === post.id\n                    ? (\n                      <button\n                        type=\"button\"\n                        className=\"PostsList__button button\"\n                        onClick={() => {\n                          setSeletedPostId(0);\n                          setPostId(0);\n                        }}\n                      >\n                        Close\n                      </button>\n                    )\n                    : (\n                      <button\n                        type=\"button\"\n                        className=\"PostsList__button button\"\n                        onClick={() => {\n                          setSeletedPostId(post.id);\n                          setPostId(post.id);\n                        }}\n                      >\n                        Open\n                      </button>\n                    )}\n\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n    </>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport const getPostComments = async (postId: number) => {\n  const response = await fetch(`${BASE_URL}/comments?postId=${postId}`);\n\n  return response.json();\n};\n\nexport const addPostComments = async (\n  name: string,\n  email: string,\n  body: string,\n  postId: number,\n) => {\n  await fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    body: JSON.stringify({\n      name,\n      email,\n      body,\n      postId,\n    }),\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n  });\n};\n\nexport const deleteComments = async (index: number) => {\n  await fetch(`${BASE_URL}/comments/${index}`, {\n    method: 'DELETE',\n  });\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\nimport { addPostComments } from '../../api/comments';\n\ntype Props = {\n  selectedPostId: number,\n  requestForComments: () => Promise<void>,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  selectedPostId,\n  requestForComments,\n}) => {\n  const [nameInput, setNameInput] = useState('');\n  const [emailInput, setEmailInput] = useState('');\n  const [commentInput, setCommentInput] = useState('');\n\n  const clear = () => {\n    setNameInput('');\n    setEmailInput('');\n    setCommentInput('');\n  };\n\n  const addComment = async (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n  ) => {\n    event.preventDefault();\n\n    if (nameInput && emailInput && commentInput) {\n      await addPostComments(\n        nameInput,\n        emailInput,\n        commentInput,\n        selectedPostId,\n      );\n      requestForComments();\n      clear();\n    }\n  };\n\n  return (\n    <form className=\"NewCommentForm\">\n      <div className=\"form-field\">\n        <input\n          required\n          value={nameInput}\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          onChange={(event) => (\n            setNameInput(event.target.value)\n          )}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          value={emailInput}\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          required\n          onChange={(event) => (\n            setEmailInput(event.target.value)\n          )}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          value={commentInput}\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          onChange={(event) => (\n            setCommentInput(event.target.value)\n          )}\n          required\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n        onClick={addComment}\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport const getUserPosts = async (userId: number) => {\n  const response = await fetch(`${BASE_URL}/posts?userId=${userId}`);\n\n  return response.json();\n};\n\nexport const getPostDetails = async (postId: number) => {\n  const response = await fetch(`${BASE_URL}/posts/${postId}`);\n\n  return response.json();\n};\n","import { useEffect, useState } from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { getPostDetails } from '../../api/posts';\nimport { deleteComments, getPostComments } from '../../api/comments';\n\ntype Props = {\n  selectedPostId: number,\n};\n\nexport const PostDetails: React.FC<Props> = ({ selectedPostId }) => {\n  const [post, setPost] = useState<Posts>();\n  const [comments, setComments] = useState<Comments[]>();\n  const [clickButton, setClickButton] = useState(false);\n\n  const requestForComments = () => (\n    getPostComments(selectedPostId)\n      .then(commentFormServer => setComments(commentFormServer))\n  );\n\n  useEffect(() => {\n    getPostDetails(selectedPostId)\n      .then(postFromServer => setPost(postFromServer));\n\n    requestForComments();\n  }, [selectedPostId]);\n\n  const deleteCom = async (i: number) => {\n    await deleteComments(i);\n    requestForComments();\n  };\n\n  return (\n    <>\n      {post && comments\n        && (\n          <div\n            data-cy=\"postDetails\"\n            className=\"PostDetails\"\n          >\n            <h2>Post details:</h2>\n\n            <section className=\"PostDetails__post\">\n              <p>{post.title}</p>\n            </section>\n\n            <section className=\"PostDetails__comments\">\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={() => (\n                  setClickButton(!clickButton)\n                )}\n              >\n                {\n                  clickButton\n                    ? 'Show comments'\n                    : 'Hide comments'\n                }\n              </button>\n\n              {!clickButton\n                && (\n                  <ul className=\"PostDetails__list\">\n                    {comments.map(comment => (\n                      <li\n                        key={comment.id}\n                        className=\"PostDetails__list-item\"\n                      >\n                        <button\n                          type=\"button\"\n                          className=\"PostDetails__remove-button button\"\n                          onClick={() => {\n                            deleteCom(comment.id);\n                          }}\n                        >\n                          X\n                        </button>\n                        <p>{comment.body}</p>\n                      </li>\n                    ))}\n                  </ul>\n                )}\n\n            </section>\n\n            <section>\n              <div className=\"PostDetails__form-wrapper\">\n                <NewCommentForm\n                  selectedPostId={selectedPostId}\n                  requestForComments={requestForComments}\n                />\n              </div>\n            </section>\n          </div>\n        )}\n    </>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport { getPosts, getUsers } from './api/api';\n\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUserPosts } from './api/posts';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState<Posts[]>();\n  const [users, setUsers] = useState<User[]>();\n\n  const [selectValue, setSelectValue] = useState('');\n  const [selectedPostId, setSeletedPostId] = useState<number>();\n\n  const getPostsFromServer = async () => {\n    const postFromServer = await getPosts();\n\n    setPosts(postFromServer);\n  };\n\n  const getUsersFromServer = async () => {\n    const postUsersServer = await getUsers();\n\n    setUsers(postUsersServer);\n  };\n\n  useEffect(() => {\n    getPostsFromServer();\n    getUsersFromServer();\n  }, []);\n\n  useEffect(() => {\n    if (selectValue !== 'all' && selectValue) {\n      getUserPosts(+selectValue).then(post => setPosts(post));\n    }\n\n    if (selectValue === 'all') {\n      getPostsFromServer();\n    }\n  }, [selectValue]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            value={selectValue}\n            onChange={(event) => {\n              setSelectValue(event.target.value);\n            }}\n            className=\"App__user-selector\"\n          >\n\n            <option value=\"all\">All users</option>\n\n            {users?.map(user => (\n              <option key={user.id} value={`${user.id}`}>\n                {user.name}\n              </option>\n            ))}\n\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          {posts\n            ? (\n              <PostsList\n                posts={posts}\n                setSeletedPostId={setSeletedPostId}\n              />\n            )\n            : 'loading...'}\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId\n            ? (\n              <PostDetails\n                selectedPostId={selectedPostId}\n              />\n            )\n            : 'No details'}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}